/////////////////////// AutoMAterial_Redshift Node Generator ///////////////////////
///////////////////////           By: Fabio Basile           ///////////////////////
////////////////////////////////////////////////////////////////////////////////////
///|----------------------------------------------------------------------------|///   
///|           This MEL script is currently under early development.            |/// 
///|                          !!  USE AT OWN RISK !!                            |///
///|----------------------------------------------------------------------------|///
////////////////////////////////////////////////////////////////////////////////////

// specify your PBR shader suffixes here and ensure that the same naming convention is followed by your painting program export settings
// If you don't need a particular PBR network to be generated, leave the specific variable blank like so: "" DO NOT LEAVE SPACES.

string $PBR_C = "Color";                       //Color
string $PBR_D = "Diffuse";                     //Diffuse
string $PBR_M = "Metalness";                   //Metalness / Reflectivity / Shine
string $PBR_R = "Roughness";                   //Roughness / Microdetails
string $PBR_E = "EmissionColor";               //Emission / Luminosity
string $PBR_o = "Opacity";   	               //Opacity / Transparency
string $PBR_N = "Normal";                      //Bump map
string $PBR_H = "DisplaceHeightField";         //Displacement / Heightfield

string $filePrefix = "[FILE_PREFIX]"; // if your texture files are created with a prefix from your painting program, add that here

//////////////////////////////////////////////////////////////////////////
////////////// !!!   DO NOT MODIFY BELOW THIS LINE   !!! /////////////////
////////////// !!! UNLESS YOU KNOW WHAT YOU'RE DOING !!! /////////////////
//////////////////////////////////////////////////////////////////////////

if(`namespace -exists $filePrefix`){
    namespace -f -mv $filePrefix ":";
    namespace -rm $filePrefix;
}
string $strDir    = "C:/[PATH TO TEXTURES FOLDER]/"+$filePrefix+"_"; //edit what's between the quotes only to specify the location of your textures on your hard drive
string $ext = ".exr"; //texture file extension
string $selectedObjs[] = `ls -sl`;
for ($obj in $selectedObjs){
    string $newMat    = `shadingNode -asShader "RedshiftMaterial"`;
    string $rnMat     = `rename $newMat ($obj + "_RS")`;
    string $newSG     = `sets -renderable true -noSurfaceShader true -empty -name ($rnMat + "SG")`;
	
	//////// IF VARIABLE EXISTS, CREATE THE FOLLOWING NODES:
	
	// GENERATE PBR COLOR NODES AND SETTINGS
	
	if(`$PBR_C != ""`){
		string $fileNodeC    = `shadingNode -asTexture file -name                 ($obj + "_RS_" + $PBR_C)`;
		connectAttr -f ( $obj + "_RS_" + $PBR_C + ".outColor" )      ( $obj + "_RS.diffuse_color" );
		string $inputC    = $fileNodeC        + ".fileTextureName";
		string $pathC     = $strDir + $obj    + "_RS_" + $PBR_C + $ext ;
		string $csC  = $fileNodeC   + ".colorSpace";
		string $csrulesC = $fileNodeC  + ".ignoreColorSpaceFileRules";
		setAttr -type "string" $inputC  $pathC;
		setAttr $csrulesC 1;
		setAttr -type "string" $csC "Raw";
	}
	
	// GENERATE PBR DIFFUSE NODES AND SETTINGS
	if(`$PBR_D != ""`){
		string $fileNodeD    = `shadingNode -asTexture file -name                 ($obj + "_RS_" + $PBR_D)`;
		connectAttr -f ( $obj + "_RS_" + $PBR_D + ".outAlpha" )      ( $obj + "_RS.diffuse_weight" );
		string $inputD    = $fileNodeD        + ".fileTextureName";
		string $pathD     = $strDir + $obj    + "_RS_" + $PBR_D + $ext ;
		string $csD  = $fileNodeD   + ".colorSpace";
		string $csrulesD = $fileNodeD  + ".ignoreColorSpaceFileRules";
		setAttr -type "string" $inputD  $pathD;
		setAttr $csrulesD 1;
		setAttr -type "string" $csD "Raw";
	}	
	// GENERATE PBR METALLICITY NODES AND SETTINGS
	if(`$PBR_M != ""`){
		string $fileNodeM    = `shadingNode -asTexture file -name                 ($obj + "_RS_" + $PBR_M)`;
		connectAttr -f ( $obj + "_RS_" + $PBR_M + ".outAlpha" )      ( $obj + "_RS.refl_weight" );
		string $inputM    = $fileNodeM        + ".fileTextureName";
		string $pathM     = $strDir + $obj    + "_RS_" + $PBR_M + $ext ;
		string $csM  = $fileNodeM   + ".colorSpace";
		string $csrulesM = $fileNodeM  + ".ignoreColorSpaceFileRules";
		setAttr -type "string" $inputM  $pathM;
		setAttr $csrulesM 1;
		setAttr -type "string" $csM "Raw";
	}	
	// GENERATE PBR ROUGHNESS NODES AND SETTINGS
	if(`$PBR_R != ""`){
		string $fileNodeR    = `shadingNode -asTexture file -name                 ($obj + "_RS_" + $PBR_R)`;
		connectAttr -f ( $obj + "_RS_" + $PBR_R + ".outAlpha" )      ( $obj + "_RS.refl_roughness" );
		string $inputR    = $fileNodeR        + ".fileTextureName";
		string $pathR     = $strDir + $obj    + "_RS_" + $PBR_R + $ext ;
		string $csR  = $fileNodeR   + ".colorSpace";
		string $csrulesR = $fileNodeR  + ".ignoreColorSpaceFileRules";
		setAttr -type "string" $inputR  $pathR;
		setAttr $csrulesR 1;
		setAttr -type "string" $csR "Raw";
	}	
	// GENERATE PBR EMISSION NODES AND SETTINGS
	if(`$PBR_E != ""`){
		string $fileNodeE    = `shadingNode -asTexture file -name                 ($obj + "_RS_" + $PBR_E)`;
		connectAttr -f ( $obj + "_RS_" + $PBR_E)+ ".outColor" ) 	 ( $obj + "_RS.emission_color" );
		string $inputE    = $fileNodeE        + ".fileTextureName";
		string $pathE     = $strDir + $obj    + "_RS_" + $PBR_E + $ext ;		
		string $csE  = $fileNodeE   + ".colorSpace";
		string $csrulesE = $fileNodeE  + ".ignoreColorSpaceFileRules";
		setAttr -type "string" $inputE  $pathE;	
		setAttr $csrulesE 1;
		setAttr -type "string" $csE "Raw";
	}	
	// GENERATE PBR OPACITY NODES AND SETTINGS
	if(`$PBR_O != ""`){
		string $fileNodeO    = `shadingNode -asTexture file -name                 ($obj + "_RS_" + $PBR_O)`;
		connectAttr -f ( $obj + "_RS_" + $PBR_O)+ ".outAlpha" ) 	 ( $obj + "_RS.opacity_color" );
		string $pathO     = $strDir + $obj    + "_RS_" + $PBR_O + $ext ;		
		string $inputO    = $fileNodeO        + ".fileTextureName";
		string $csO  = $fileNodeO   + ".colorSpace";
		string $csrulesO = $fileNodeO  + ".ignoreColorSpaceFileRules";
		setAttr -type "string" $inputO  $pathO;	
		setAttr $csrulesO 1;
		setAttr -type "string" $csO "Raw";
	}	
	// GENERATE PBR NORMAL NODES AND SETTINGS
	if(`$PBR_N != ""`){
		string $fileNodeN    = `shadingNode -asUtility RedshiftBumpMap -name      ($obj + "_RS_" + $PBR_N)`;
		string $fileNodeNM   = `shadingNode -asTexture file -name                 ($obj + "_RS_" + $PBR_N + "Map")`;	
		connectAttr -f ( $obj + "_RS_" + $PBR_N + ".input" )         ( $obj + "_RSSG.rsBumpmapShader" );
		connectAttr -f ( $obj + "_RS_" + $PBR_N + "M.outColor" )     ( $obj + "_RS_Normal.input" );	
		string $inputN    = $fileNodeNM       + ".fileTextureName";
		string $pathNM    = $strDir + $obj    + "_RS_" + $PBR_N + "M" + $ext ;
		string $inputN    = $fileNodeN        + ".input";
		string $pathN     = $strDir + $obj    + "_RS_" + $PBR_N + $ext ;		
		string $csN  = $fileNodeNM  + ".colorSpace";
		string $csrulesN = $fileNodeNM + ".ignoreColorSpaceFileRules";
		setAttr -type "string" $inputNM $pathN;
		setAttr $csrulesN 1;
		setAttr -type "string" $csN "Raw";
	}	
	// GENERATE PBR DISPLACEMENT NODES AND SETTINGS
	if(`$PBR_N != ""`){
		string $fileNodeH    = `shadingNode -asUtility RedshiftDisplacement -name ($obj + "_RS_" + $PBR_H)`;
		string $fileNodeHM   = `shadingNode -asTexture file -name                 ($obj + "_RS_" + $PBR_H + "Map")`;	
		connectAttr -f ( $obj + "_RS_" + $PBR_H + ".texMap" )        ( $obj + "_RSSG.rsDisplacementShader" );
		connectAttr -f ( $obj + "_RS_" + $PBR_H + "M.outColor" )     ( $obj + "_RS_DisplaceHeightField.texMap" );
		string $inputHM   = $fileNodeHM       + ".fileTextureName";
		string $pathHM    = $strDir + $obj    + "_RS_" + $PBR_H + "M" + $ext ;	
		string $inputH    = $fileNodeH        + ".texMap";
		string $pathH     = $strDir + $obj    + "_RS_" + $PBR_H + $ext ;	
		string $csH  = $fileNodeHM  + ".colorSpace";
		string $csrulesH = $fileNodeHM + ".ignoreColorSpaceFileRules";
		setAttr -type "string" $inputHM $pathH;
		setAttr $csrulesH 1;
		setAttr -type "string" $csH "Raw";
	}	
    
    // connect each material to each shader, rinse and repeat
    	
    connectAttr -f ($rnMat + ".outColor") ($newSG + ".surfaceShader");
    sets -e -forceElement $newSG $obj;
}